diff --git a/.gitignore b/.gitignore
index 7187e43..1594702 100644
--- a/.gitignore
+++ b/.gitignore
@@ -6,5 +6,4 @@ __pycache__
 venv/
 .env
 *.env
-backend/test.db
-credentials.json
\ No newline at end of file
+backend/test.db
\ No newline at end of file
diff --git a/backend/data-sources-config.json b/backend/data-sources-config.json
new file mode 100644
index 0000000..fbc19d6
--- /dev/null
+++ b/backend/data-sources-config.json
@@ -0,0 +1,36 @@
+{
+  "dataSources": {
+    "midrc": {
+      "id": "midrc",
+      "name": "MIDRC Data Source",
+      "description": "Download files from MIDRC using object ID",
+      "command": "gen3-client",
+      "timeout": 300,
+      "workingDirectory": ".",
+      "args": [
+        "--auth", "{cred}",
+        "--endpoint", "data.midrc.org",
+        "drs-pull", "object",
+        "{object_id}",
+        "--output-dir", "database/midrc/{doc_id}/"
+      ],
+      "environment": {
+        "MIDRC_CREDENTIALS_PATH": "{cred}"
+      },
+      "parameters": [
+        {
+          "name": "object_id",
+          "label": "Object ID",
+          "type": "text",
+          "required": true,
+          "placeholder": "Enter MIDRC object ID"
+        }
+      ],
+      "outputParsing": {
+        "type": "directory",
+        "outputPath": "database/midrc/{doc_id}/",
+        "filePatterns": ["*"]
+      }
+    }
+  }
+} 
\ No newline at end of file
diff --git a/backend/midrc.py b/backend/midrc.py
new file mode 100644
index 0000000..e5abb87
--- /dev/null
+++ b/backend/midrc.py
@@ -0,0 +1,187 @@
+import os
+import subprocess
+import threading
+import time
+import logging
+
+
+from gen3.auth import Gen3Auth
+from gen3.query import Gen3Query
+
+logger = logging.getLogger('midrc')
+
+MIDRC_API = "https://data.midrc.org"
+
+auth = Gen3Auth(MIDRC_API, refresh_file=os.environ.get('MIDRC_CREDENTIALS_PATH')) # authentication class
+query = Gen3Query(auth)
+
+
+def download_midrc_file_implementation(object_id, document_id, app, cred_path, output_dir):
+    # Create unique download ID for tracking (sanitize object_id for URL safety)
+    sanitized_object_id = object_id.replace('/', '_').replace('.', '_')
+    download_id = f"{sanitized_object_id}_{int(time.time())}"
+    
+    # Store download status (you might want to use Redis or database for persistence)
+    download_status = {
+        'status': 'started',
+        'progress': 'Initiating download...',
+        'object_id': object_id,
+        'download_id': download_id
+    }
+    
+    # Store in memory (for simple implementation)
+    if not hasattr(app, 'download_statuses'):
+        app.download_statuses = {}
+    app.download_statuses[download_id] = download_status
+    
+    def background_download():
+        """Execute download in background thread"""
+        try:
+            app.download_statuses[download_id]['progress'] = 'Executing gen3 command...'
+            
+            # Build the gen3 command directly
+            cmd = f"gen3 --auth {cred_path} --endpoint data.midrc.org drs-pull object {object_id} --output-dir {output_dir}"
+            logger.info(f"Executing command: {cmd}")
+            
+            # Execute command directly with subprocess for better control
+            result = subprocess.run(
+                cmd,
+                shell=True,
+                capture_output=True,
+                text=True,
+                timeout=300  # 5 minute timeout
+            )
+            
+            if result.returncode == 0:
+                logger.info("✅ Command executed successfully")
+                logger.info(f"STDOUT: {result.stdout}")
+                
+                # Find all downloaded files in the output directory
+                downloaded_files = []
+                for root, dirs, files in os.walk(output_dir):
+                    for file in files:
+                        file_path = os.path.join(root, file)
+                        downloaded_files.append(file_path)
+                
+                if downloaded_files:
+                    file_path = downloaded_files[0]
+                    app.download_statuses[download_id].update({
+                        'status': 'completed',
+                        'progress': 'Download completed successfully',
+                        'file_path': file_path,
+                        'downloaded_files': downloaded_files,
+                        'success': True
+                    })
+                    logger.info(f"✅ MIDRC file downloaded successfully: {file_path}")
+                else:
+                    app.download_statuses[download_id].update({
+                        'status': 'failed',
+                        'progress': 'No files found after download',
+                        'error': 'No files found after download',
+                        'success': False
+                    })
+            else:
+                error_msg = f"Command failed with exit code {result.returncode}"
+                if result.stderr:
+                    error_msg += f": {result.stderr}"
+                app.download_statuses[download_id].update({
+                    'status': 'failed',
+                    'progress': f'Download failed: {error_msg}',
+                    'error': error_msg,
+                    'success': False
+                })
+                logger.error(f"❌ MIDRC download failed: {error_msg}")
+                
+        except subprocess.TimeoutExpired:
+            app.download_statuses[download_id].update({
+                'status': 'failed',
+                'progress': 'Download timed out after 5 minutes',
+                'error': 'Download timed out after 5 minutes',
+                'success': False
+            })
+            logger.error("❌ MIDRC download timed out")
+        except Exception as e:
+            app.download_statuses[download_id].update({
+                'status': 'failed',
+                'progress': f'Error: {str(e)}',
+                'error': str(e),
+                'success': False
+            })
+            logger.error(f"❌ Background download error: {e}")
+    
+    # Start background thread
+    thread = threading.Thread(target=background_download)
+    thread.daemon = True
+    thread.start()
+
+    return {}
+
+
+def access_midrc_info_by_caseid(case_ids):
+    cases = query.raw_data_download(
+                    data_type="case",
+                    fields=None,
+                    filter_object={
+                        "AND": [
+                            {"IN": {"case_ids": case_ids}},
+                        ]
+                    },
+                    sort_fields=[{"submitter_id": "asc"}]
+                )
+
+    if len(cases) > 0 and "submitter_id" in cases[0]:
+        case_ids = [i['submitter_id'] for i in cases] ## make a list of the case (patient) IDs returned
+        print("Query returned {} case IDs.".format(len(cases)))
+        print("Data is a list with rows like this:\n\t {}".format(cases[0:1]))
+    else:
+        print("Your query returned no data! Please, check that query parameters are valid.")
+
+
+def access_midrc_files_by_caseid(case_ids, document_id, app, cred_path, output_dir):
+    source_nodes = ["cr_series_file","dx_series_file","annotation_file","dicom_annotation_file"]
+    modality = ["SEG", "CR", "DX"]
+    auth = Gen3Auth(MIDRC_API, refresh_file=os.environ.get('MIDRC_CREDENTIALS_PATH')) # authentication class
+    query = Gen3Query(auth)
+    data_files = query.raw_data_download(
+                    data_type="data_file",
+                    fields=None,
+                    filter_object={
+                        "AND": [
+                            {"IN": {"case_ids": case_ids}},
+                            {"IN": {"source_node": source_nodes}},
+                            {"IN": {"modality": modality}},
+                        ]
+                    },
+                    sort_fields=[{"submitter_id": "asc"}]
+                )
+
+    if len(data_files) > 0:
+        object_ids = [i['object_id'] for i in data_files if 'object_id' in i] ## make a list of the file object_ids returned by our query
+        print("Query returned {} data files with {} object_ids.".format(len(data_files),len(object_ids)))
+        print("Data is a list with rows like this:\n\t {}".format(data_files[0:1]))
+    else:
+        print("Your query returned no data! Please, check that query parameters are valid.")
+
+    ## Build a list 
+    object_ids = []
+    for data_file in data_files:
+        if 'object_id' in data_file:
+            object_id = data_file['object_id']
+            object_ids.append(object_id)
+
+    object_id = object_ids[1]
+    print("The first object_id of {}: '{}'".format(len(object_ids),object_id))
+    download_id = download_midrc_file_implementation(object_id, document_id, app, cred_path, output_dir)
+    return download_id
+
+
+def gather_midrc_info_by_caseid(case_ids, document_id, app, cred_path, output_dir):
+    cases = access_midrc_info_by_caseid(case_ids)
+    download_id = access_midrc_files_by_caseid(case_ids, document_id, app, cred_path, output_dir)
+    return cases, download_id
+
+
+
+
+
+# query = Gen3Query(auth)
\ No newline at end of file
diff --git a/backend/pdf_processor.py b/backend/pdf_processor.py
index edabeb1..62cadf2 100644
--- a/backend/pdf_processor.py
+++ b/backend/pdf_processor.py
@@ -1,6 +1,7 @@
+# extract_pdf_to_json.py
 import fitz  # PyMuPDF
-import os
 import json
+import os
 
 def save_clean_backgrounds(pdf_path, image_dir="images_clean"):
     print(f"Saving cleaned background images to: {image_dir}")
@@ -8,16 +9,20 @@ def save_clean_backgrounds(pdf_path, image_dir="images_clean"):
     doc = fitz.open(pdf_path)
 
     for i, page in enumerate(doc):
-        blocks = page.get_text("dict")["blocks"]
+        # Temporarily remove text blocks by creating a copy of the page with vector content only
+        text_instances = page.get_text("dict")["blocks"]
 
-        # Remove both text and images
-        for block in blocks:
-            if block["type"] in (0, 1):  # 0=text, 1=image
+        # Remove text blocks without adding fill (clean transparent removal)
+        for block in text_instances:
+            if block["type"] == 0:  # type 0 = text
                 rect = fitz.Rect(block["bbox"])
-                page.add_redact_annot(rect, text="")
+                page.add_redact_annot(rect, text="")  # Remove text without fill
+
 
+        # Apply redactions (removes text visually)
         page.apply_redactions()
 
+        # Save background image
         pix = page.get_pixmap(dpi=150)
         pix.save(os.path.join(image_dir, f"page_{i + 1}.png"))
 
@@ -25,6 +30,7 @@ def save_clean_backgrounds(pdf_path, image_dir="images_clean"):
 
 
 def process_pdf_file(pdf_path, json_path, clean_image_dir="images_clean"):
+    # create clean_images
     save_clean_backgrounds(pdf_path, clean_image_dir)
     doc = fitz.open(pdf_path)
     result = []
@@ -38,18 +44,25 @@ def process_pdf_file(pdf_path, json_path, clean_image_dir="images_clean"):
         }
 
         blocks = page.get_text("dict")["blocks"]
-        image_counter = 0
         for block in blocks:
             if block["type"] == 0:
-                # TEXT
                 for line in block["lines"]:
                     for span in line["spans"]:
+                        # Handle color conversion properly
                         color_int = span["color"]
-                        r = (color_int >> 16) & 0xFF
-                        g = (color_int >> 8) & 0xFF
-                        b = color_int & 0xFF
-                        color_hex = "#{:02x}{:02x}{:02x}".format(r, g, b)
-
+                        if isinstance(color_int, int):
+                            # Convert integer color to RGB
+                            r = (color_int >> 16) & 0xFF
+                            g = (color_int >> 8) & 0xFF
+                            b = color_int & 0xFF
+                            color_hex = "#{:02x}{:02x}{:02x}".format(r, g, b)
+                        elif isinstance(color_int, (list, tuple)) and len(color_int) >= 3:
+                            # Handle case where color is already RGB values
+                            color_hex = "#{:02x}{:02x}{:02x}".format(int(color_int[0]), int(color_int[1]), int(color_int[2]))
+                        else:
+                            # Default to black if color format is unexpected
+                            color_hex = "#000000"
+                        
                         el = {
                             "type": "text",
                             "text": span["text"],
@@ -63,30 +76,9 @@ def process_pdf_file(pdf_path, json_path, clean_image_dir="images_clean"):
                         }
                         page_data["elements"].append(el)
 
-            elif block["type"] == 1:
-                # IMAGE
-                rect = block["bbox"]
-                x0, y0, x1, y1 = rect
-                pix = page.get_pixmap(clip=fitz.Rect(rect))
-                img_path = f"{clean_image_dir}/page_{page_num + 1}_img_{image_counter}.png"
-                pix.save(img_path)
-                image_counter += 1
-
-                el = {
-                    "type": "image",
-                    "src": img_path,
-                    "x": x0,
-                    "y": y0,
-                    "width": x1 - x0,
-                    "height": y1 - y0
-                }
-                page_data["elements"].append(el)
-
         result.append(page_data)
 
     with open(json_path, "w", encoding="utf-8") as f:
         json.dump(result, f, indent=2)
 
     return result
-
-
diff --git a/backend/python_backend.py b/backend/python_backend.py
index b5a1c4d..ac34dfa 100644
--- a/backend/python_backend.py
+++ b/backend/python_backend.py
@@ -7,18 +7,22 @@ from datetime import datetime
 import shutil
 import hashlib
 import base64
+import subprocess
+import sys
 from werkzeug.utils import secure_filename
 from flask import Flask, request, jsonify, send_file
 from flask_cors import CORS
 from openai import OpenAI
 
-# Load environment variables from .env file
+# Load environment variables from .env file BEFORE importing midrc
 try:
     from dotenv import load_dotenv
     load_dotenv()
 except ImportError:
     pass  # python-dotenv not installed, continue without .env support
 
+from midrc import download_midrc_file_implementation
+
 # Make together import optional
 try:
     from together import Together
@@ -36,7 +40,6 @@ from task_manager import TaskManager
 from pathlib import Path
 
 # Add parent directory to path for imports
-import sys
 sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
 
 # Configure logging
@@ -47,6 +50,46 @@ logging.basicConfig(
 )
 logger = logging.getLogger('backend')
 
+def ensure_gen3_installed():
+    """Ensure gen3 package is installed for MIDRC downloads"""
+    try:
+        # Check if gen3 command is available
+        result = subprocess.run(['gen3', '--version'], 
+                              capture_output=True, text=True, timeout=10)
+        if result.returncode == 0:
+            logger.info("✅ gen3 command-line tool is already available")
+            return True
+    except (subprocess.TimeoutExpired, FileNotFoundError, subprocess.CalledProcessError):
+        pass
+    
+    try:
+        # Check if gen3 package is installed
+        import gen3
+        logger.info("✅ gen3 Python package is available")
+        return True
+    except ImportError:
+        pass
+    
+    # Install gen3 package
+    logger.info("📦 Installing gen3 package for MIDRC downloads...")
+    try:
+        result = subprocess.run([
+            sys.executable, "-m", "pip", "install", "gen3"
+        ], capture_output=True, text=True, timeout=120)
+        
+        if result.returncode == 0:
+            logger.info("✅ gen3 package installed successfully")
+            return True
+        else:
+            logger.error(f"❌ Failed to install gen3: {result.stderr}")
+            return False
+    except Exception as e:
+        logger.error(f"❌ Error installing gen3: {e}")
+        return False
+
+# Ensure gen3 is available
+ensure_gen3_installed()
+
 app = Flask(__name__)
 CORS(app)
 
@@ -2269,6 +2312,103 @@ def execute_code_endpoint():
         }), 500
 
 
+@app.route('/api/download_midrc_file', methods=['POST'])
+def download_midrc_file():
+    """Download MIDRC file using object ID and return file path"""
+    try:
+        data = request.get_json()
+        object_id = data.get('object_id', '')
+        document_id = data.get('document_id', 'default')
+        if not object_id:
+            return jsonify({
+                'success': False,
+                'error': 'Object ID is required'
+            }), 400
+        
+        # Load MIDRC configuration
+        config_path = os.path.join(os.path.dirname(__file__), 'data-sources-config.json')
+        try:
+            with open(config_path, 'r') as f:
+                config = json.load(f)
+            midrc_config = config.get('dataSources', {}).get('midrc', {})
+        except FileNotFoundError:
+            return jsonify({
+                'success': False,
+                'error': 'MIDRC configuration file not found'
+            }), 500
+        
+        # Create output directory
+        output_dir = os.path.join(os.path.dirname(__file__), 'database', 'midrc', document_id)
+        os.makedirs(output_dir, exist_ok=True)
+        
+        # Prepare command arguments with proper placeholder replacement
+        args = []
+        cred_path = os.environ.get('MIDRC_CREDENTIALS_PATH')
+
+        # Check if credentials file exists
+        if not os.path.exists(cred_path):
+            logger.error(f"❌ Credentials file not found: {cred_path}")
+            return jsonify({
+                'success': False,
+                'error': f'Credentials file not found at: {cred_path}. Please ensure MIDRC credentials are properly configured.'
+            }), 500
+
+        for arg in midrc_config.get('args', []):
+            # Replace placeholders within each argument string
+            processed_arg = arg
+            processed_arg = processed_arg.replace('{object_id}', object_id)
+            processed_arg = processed_arg.replace('{doc_id}', document_id)
+            processed_arg = processed_arg.replace('{cred}', cred_path)
+            args.append(processed_arg)
+        
+        download_id = download_midrc_file_implementation(object_id, document_id, app, cred_path, output_dir)
+        # Return immediately with download ID for status checking
+        return jsonify({
+            'success': True,
+            'message': 'Download started in background',
+            'download_id': download_id,
+            'object_id': object_id,
+            'status_check_url': f'/api/download_status/{download_id}'
+        })
+            
+    except Exception as e:
+        logger.error(f"❌ Error downloading MIDRC file: {e}")
+        return jsonify({
+            'success': False,
+            'error': str(e)
+        }), 500
+
+
+@app.route('/api/download_status/<download_id>', methods=['GET'])
+def get_download_status(download_id):
+    """Get the status of a background download"""
+    try:
+        if not hasattr(app, 'download_statuses'):
+            return jsonify({
+                'success': False,
+                'error': 'No downloads found'
+            }), 404
+
+        status = app.download_statuses.get(download_id)
+        if not status:
+            return jsonify({
+                'success': False,
+                'error': 'Download not found'
+            }), 404
+        
+        return jsonify({
+            'success': True,
+            'download_status': status
+        })
+        
+    except Exception as e:
+        logger.error(f"❌ Error getting download status: {e}")
+        return jsonify({
+            'success': False,
+            'error': str(e)
+        }), 500
+
+
 # Coding Agent Integration
 @app.route('/api/agents/coding', methods=['POST'])
 def execute_coding_agent():
diff --git a/backend/template.py b/backend/template.py
index db53bb0..a87a119 100644
--- a/backend/template.py
+++ b/backend/template.py
@@ -123,7 +123,8 @@ class Template:
         # If type is unknown, try to detect from file extension or URL
         if item_type == 'unknown' and content:
             item_type = self._detect_content_type(content, name)
-            
+        
+
         # Handle different content types
         if item_type.startswith('image/'):
             # For images, create an HTML img tag
@@ -290,7 +291,6 @@ class Template:
         else:
             processed_text = self._process_template(client, result.variables)
 
-        print(f"++++++++++++ Template Processed text: {processed_text}")
         # Update the result
         result.rendered_output = processed_text
         result.rendering_mode = mode
diff --git a/css/styles.css b/css/styles.css
index 86cb653..a7faeba 100644
--- a/css/styles.css
+++ b/css/styles.css
@@ -3969,7 +3969,7 @@ p {
   padding: 4px;
   border: 1px solid rgba(0, 0, 0, 0.1);
   position: relative;
-  z-index: 1001;
+  z-index: 999;
 }
 
 .mode-btn {
@@ -8483,26 +8483,355 @@ p {
   }
 }
 
+/* Upload Dropdown Styles */
+.upload-dropdown {
+  background: white;
+  border: 1px solid #d1d5db;
+  border-radius: 8px;
+  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
+  overflow: hidden;
+  animation: fadeInDown 0.2s ease-out;
+}
 
-.pdf-container {
-  position: relative;
-  user-select: none;
+.upload-dropdown-content {
+  padding: 8px 0;
 }
 
-.pdf-page {
-  border: 1px solid #ccc;
-  margin: 10px auto;
+.upload-option {
+  display: flex;
+  align-items: center;
+  padding: 12px 16px;
+  cursor: pointer;
+  transition: background-color 0.15s ease;
+  border: none;
+  background: transparent;
+  width: 100%;
+  text-align: left;
 }
 
-.text-box {
-  border: 1px dashed transparent !important;
-  outline: none !important;
-  transition: border-color 0.2s ease;
+.upload-option:hover {
+  background-color: #f3f4f6;
+}
+
+.upload-option-icon {
+  font-size: 18px;
+  margin-right: 12px;
+  width: 24px;
+  text-align: center;
+}
+
+.upload-option-text {
+  flex: 1;
+}
+
+.upload-option-title {
+  font-weight: 500;
+  color: #374151;
+  margin-bottom: 2px;
+}
+
+.upload-option-desc {
+  font-size: 12px;
+  color: #6b7280;
+  line-height: 1.3;
+}
+
+.upload-option-configure {
+  border-top: 1px solid #e5e7eb;
+  margin-top: 4px;
+  padding-top: 12px;
+}
+
+/* Parameter Input Dialog Styles */
+.parameter-input-dialog {
+  max-width: 600px;
+  width: 90%;
+}
+
+.parameter-input-dialog .form-group {
+  margin-bottom: 20px;
+}
+
+.parameter-input-dialog label {
+  display: block;
+  font-weight: 500;
+  color: #374151;
+  margin-bottom: 6px;
+}
+
+.parameter-input-dialog .required {
+  color: #dc2626;
+  margin-left: 4px;
+}
+
+.parameter-input-dialog .form-input {
+  width: 100%;
+  padding: 10px 12px;
+  border: 1px solid #d1d5db;
+  border-radius: 6px;
+  font-size: 14px;
+  transition: border-color 0.15s ease, box-shadow 0.15s ease;
+}
+
+.parameter-input-dialog .form-input:focus {
+  outline: none;
+  border-color: #3b82f6;
+  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
+}
+
+.parameter-input-dialog .param-description {
+  font-size: 12px;
+  color: #6b7280;
+  margin-top: 4px;
+  font-style: italic;
 }
-.text-box:focus {
-  border: 1px dashed #666 !important;
-  outline: none !important;
+
+.command-preview {
+  background: #f8f9fa;
+  border: 1px solid #e9ecef;
+  border-radius: 6px;
+  padding: 12px;
+  margin: 20px 0;
 }
-.text-box:hover {
-  border: 1px dashed #ccc !important;
+
+.command-preview label {
+  font-weight: 500;
+  color: #495057;
+  margin-bottom: 8px;
+  display: block;
 }
+
+.command-preview pre {
+  background: #fff;
+  border: 1px solid #dee2e6;
+  border-radius: 4px;
+  padding: 8px 10px;
+  margin: 0;
+  font-family: 'Monaco', 'Consolas', monospace;
+  font-size: 13px;
+  color: #212529;
+  overflow-x: auto;
+}
+
+.execution-status {
+  background: #e3f2fd;
+  border: 1px solid #bbdefb;
+  border-radius: 6px;
+  padding: 16px;
+  margin-top: 20px;
+}
+
+.execution-status .status-text {
+  color: #1565c0;
+  font-weight: 500;
+  margin-bottom: 10px;
+}
+
+.status-progress {
+  width: 100%;
+  height: 6px;
+  background: #e1f5fe;
+  border-radius: 3px;
+  overflow: hidden;
+}
+
+.progress-bar {
+  height: 100%;
+  background: linear-gradient(90deg, #2196f3, #1976d2);
+  width: 0%;
+  animation: progressAnimation 2s ease-in-out infinite;
+}
+
+@keyframes progressAnimation {
+  0% { width: 0%; }
+  50% { width: 70%; }
+  100% { width: 100%; }
+}
+
+/* Configuration Dialog Styles */
+.config-dialog {
+  max-width: 700px;
+  width: 90%;
+}
+
+.config-list {
+  max-height: 400px;
+  overflow-y: auto;
+  margin: 20px 0;
+}
+
+.config-item {
+  border: 1px solid #e5e7eb;
+  border-radius: 8px;
+  padding: 16px;
+  margin-bottom: 12px;
+  background: #fafafa;
+}
+
+.config-header {
+  display: flex;
+  justify-content: space-between;
+  align-items: flex-start;
+  margin-bottom: 8px;
+}
+
+.config-header h4 {
+  margin: 0;
+  color: #374151;
+  font-size: 16px;
+}
+
+.config-actions {
+  display: flex;
+  gap: 8px;
+}
+
+.config-actions button {
+  font-size: 12px;
+  padding: 4px 8px;
+  border-radius: 4px;
+  border: 1px solid;
+  cursor: pointer;
+  transition: all 0.15s ease;
+}
+
+.edit-config-btn {
+  background: #e0f2fe;
+  border-color: #81d4fa;
+  color: #0277bd;
+}
+
+.edit-config-btn:hover {
+  background: #b3e5fc;
+}
+
+.delete-config-btn {
+  background: #ffebee;
+  border-color: #ffcdd2;
+  color: #c62828;
+}
+
+.delete-config-btn:hover {
+  background: #ffcdd2;
+}
+
+.config-details {
+  margin-top: 12px;
+}
+
+.config-details code {
+  background: #fff;
+  border: 1px solid #dee2e6;
+  border-radius: 4px;
+  padding: 8px 10px;
+  font-family: 'Monaco', 'Consolas', monospace;
+  font-size: 12px;
+  color: #495057;
+  display: block;
+  overflow-x: auto;
+}
+
+/* Downloaded Files Dialog Styles */
+.downloaded-files-dialog {
+  max-width: 600px;
+  width: 90%;
+}
+
+.files-list {
+  max-height: 300px;
+  overflow-y: auto;
+  border: 1px solid #e5e7eb;
+  border-radius: 6px;
+  margin: 16px 0;
+}
+
+.file-item {
+  display: flex;
+  align-items: center;
+  padding: 12px 16px;
+  border-bottom: 1px solid #f3f4f6;
+}
+
+.file-item:last-child {
+  border-bottom: none;
+}
+
+.file-item input[type="checkbox"] {
+  margin-right: 12px;
+}
+
+.file-item label {
+  display: flex;
+  align-items: center;
+  flex: 1;
+  cursor: pointer;
+  margin: 0;
+}
+
+.file-icon {
+  margin-right: 8px;
+  font-size: 16px;
+}
+
+.file-name {
+  flex: 1;
+  font-weight: 500;
+  color: #374151;
+}
+
+.file-size {
+  font-size: 12px;
+  color: #6b7280;
+  margin-left: 8px;
+}
+
+/* Animation */
+@keyframes fadeInDown {
+  from {
+    opacity: 0;
+    transform: translateY(-10px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0);
+  }
+}
+
+/* Button variants for the dialogs */
+.btn-danger {
+  background-color: #dc2626;
+  color: white;
+  border: 1px solid #dc2626;
+  padding: 8px 16px;
+  border-radius: 6px;
+  cursor: pointer;
+  font-size: 14px;
+  transition: all 0.15s ease;
+}
+
+.btn-danger:hover {
+  background-color: #b91c1c;
+  border-color: #b91c1c;
+}
+
+/* Responsive adjustments for upload dropdown */
+@media (max-width: 768px) {
+  .upload-dropdown {
+    left: 10px !important;
+    right: 10px;
+    width: auto !important;
+    min-width: auto !important;
+  }
+  
+  .parameter-input-dialog,
+  .config-dialog,
+  .downloaded-files-dialog {
+    width: 95%;
+    margin: 20px auto;
+  }
+  
+  .config-header {
+    flex-direction: column;
+    align-items: flex-start;
+  }
+}
\ No newline at end of file
diff --git a/js/README.md b/js/README.md
index 6493096..cbc3ea7 100644
--- a/js/README.md
+++ b/js/README.md
@@ -173,3 +173,12 @@ The DocumentManager provides several lifecycle methods you can hook into:
 ### Document Deletion
 - `deleteDocument(docId)` → Permanently removes document
 - `cleanAllElement(docId)` → Removes all DOM elements and cleans up
+
+# Variable System
+Currently there are 3 palces to edit variables:
+
+- Directly set values in Variable dialog
+- Set operator/code for a variable in Variable diaglog
+- In Operator page, add tools and operator for one or more variables.
+
+No matter where you edit the variable, the interface will save the relevant data into backend, and when you load again, they will load from backend, so that they're consistent.
\ No newline at end of file
diff --git a/js/data-source.js b/js/data-source.js
index aac2b33..5257421 100644
--- a/js/data-source.js
+++ b/js/data-source.js
@@ -25,6 +25,9 @@ async function loadDataSourcesForCurrentDocument() {
     return;
   }
   
+  console.log(`[${windowId}] 🔍 DEBUG: loadDataSourcesForCurrentDocument called`);
+  console.log(`[${windowId}] Loading Data Sources from backend for document: ${currentDocumentId}`);
+  
   try {
     const response = await fetch(`http://127.0.0.1:5000/api/data-sources?documentId=${currentDocumentId}&windowId=${windowId}&session_id=${state.sessionId || windowId}`);
     
@@ -33,20 +36,25 @@ async function loadDataSourcesForCurrentDocument() {
     }
     
     const result = await response.json();
+    console.log(`[${windowId}] 🔍 DEBUG: Backend response:`, result);
     
     if (result.success && result.dataSources) {
       dataSources = result.dataSources;
       console.log(`[${windowId}] ✅ Loaded ${dataSources.length} items from backend for document ${currentDocumentId}`);
+      console.log(`[${windowId}] 🔍 DEBUG: Loaded dataSources:`, dataSources);
     } else {
       dataSources = [];
       console.log(`[${windowId}] No data sources found in backend for document ${currentDocumentId}, starting fresh`);
     }
     
   } catch (error) {
+    console.error(`[${windowId}] ❌ Error loading data sources from backend:`, error);
     dataSources = [];
     console.log(`[${windowId}] Starting with empty data sources due to backend error`);
   }
-
+  
+  console.log(`[${windowId}] 🔍 DEBUG: Final dataSources array:`, dataSources);
+  console.log(`[${windowId}] 🔍 DEBUG: Final dataSources length:`, dataSources.length);
 }
 
 // Save data sources for current document to backend
@@ -58,6 +66,9 @@ async function saveDataSources() {
     return;
   }
   
+  console.log(`[${windowId}] 🔍 DEBUG: saveDataSources - saving to backend for document: ${currentDocumentId}`);
+  console.log(`[${windowId}] 🔍 DEBUG: saveDataSources - saving dataSources:`, dataSources);
+  
   try {
     const response = await fetch('http://127.0.0.1:5000/api/data-sources', {
       method: 'POST',
@@ -136,6 +147,9 @@ function initDataSourcesUI() {
 export async function addToDataSources(file) {
   const currentDocumentId = getCurrentDocumentId();
   
+  console.log(`[${windowId}] 🔍 DEBUG: addToDataSources called with file:`, file);
+  console.log(`[${windowId}] 🔍 DEBUG: currentDocumentId:`, currentDocumentId);
+  
   if (!currentDocumentId) {
     console.warn(`[${windowId}] Cannot add to data sources: no current document set`);
     return false;
@@ -158,6 +172,8 @@ export async function addToDataSources(file) {
     documentId: currentDocumentId
   };
   
+  console.log(`[${windowId}] 🔍 DEBUG: Created dataItem:`, dataItem);
+  
   // Check if item already exists
   const existingIndex = dataSources.findIndex(item => item.name === dataItem.name);
   if (existingIndex !== -1) {
@@ -168,6 +184,9 @@ export async function addToDataSources(file) {
     console.log(`[${windowId}] Added new item to Data Sources: ${dataItem.name}`);
   }
   
+  console.log(`[${windowId}] 🔍 DEBUG: dataSources array after adding:`, dataSources);
+  console.log(`[${windowId}] 🔍 DEBUG: dataSources length:`, dataSources.length);
+  
   await saveDataSources(); // Save to backend
   return true;
 }
@@ -229,11 +248,17 @@ function setupDataSourcesDialogEventListeners(dialog) {
 function showDataSourcesDialog() {
   const currentDocumentId = getCurrentDocumentId();
   
+  console.log(`[${windowId}] 🔍 DEBUG: showDataSourcesDialog called`);
+  console.log(`[${windowId}] 🔍 DEBUG: currentDocumentId:`, currentDocumentId);
+  
   if (!currentDocumentId) {
     alert('Please select a document first');
     return;
   }
   
+  console.log(`[${windowId}] 🔍 DEBUG: dataSources array at dialog open:`, dataSources);
+  console.log(`[${windowId}] 🔍 DEBUG: dataSources length:`, dataSources.length);
+  
   const dialog = getOrCreateDataSourcesDialog();
   if (dialog) {
     dialog.style.display = 'flex';
@@ -252,10 +277,17 @@ function hideDataSourcesDialog() {
 }
 
 // Refresh Data Sources dialog content
-function refreshDataSourcesDialog() {  
+function refreshDataSourcesDialog() {
+  console.log(`[${windowId}] 🔍 DEBUG: refreshDataSourcesDialog called`);
+  
   const itemsContainer = getDocumentElement('data-sources-items');
   const noDataMessage = getDocumentElement('no-data-message');
   
+  console.log(`[${windowId}] 🔍 DEBUG: itemsContainer found:`, !!itemsContainer);
+  console.log(`[${windowId}] 🔍 DEBUG: noDataMessage found:`, !!noDataMessage);
+  console.log(`[${windowId}] 🔍 DEBUG: dataSources array in refresh:`, dataSources);
+  console.log(`[${windowId}] 🔍 DEBUG: dataSources length in refresh:`, dataSources.length);
+  
   if (!itemsContainer) {
     console.error(`[${windowId}] 🔍 DEBUG: data-sources-items container not found!`);
     return;
@@ -263,18 +295,22 @@ function refreshDataSourcesDialog() {
   
   // Clear existing items
   const existingItems = itemsContainer.querySelectorAll('.data-sources-item');
+  console.log(`[${windowId}] 🔍 DEBUG: Found ${existingItems.length} existing items to remove`);
   existingItems.forEach(item => item.remove());
   
   if (dataSources.length === 0) {
+    console.log(`[${windowId}] 🔍 DEBUG: No data in lake, showing no-data message`);
     if (noDataMessage) {
       noDataMessage.style.display = 'block';
     }
   } else {
+    console.log(`[${windowId}] 🔍 DEBUG: Found ${dataSources.length} items, hiding no-data message and creating items`);
     if (noDataMessage) {
       noDataMessage.style.display = 'none';
     }
     
     dataSources.forEach((item, index) => {
+      console.log(`[${windowId}] 🔍 DEBUG: Creating UI element for item ${index}:`, item);
       const itemElement = createDataSourcesItemElement(item);
       itemsContainer.appendChild(itemElement);
     });
@@ -283,6 +319,8 @@ function refreshDataSourcesDialog() {
 
 // Create Data Sources item element
 function createDataSourcesItemElement(item) {
+  console.log(`[${windowId}] 🔍 DEBUG: createDataSourcesItemElement called for item:`, item);
+  
   const itemElement = document.createElement('div');
   itemElement.className = 'data-sources-item';
   itemElement.setAttribute('data-item-id', item.id);
@@ -312,6 +350,7 @@ function createDataSourcesItemElement(item) {
     </div>
   `;
   
+  console.log(`[${windowId}] 🔍 DEBUG: Created item element:`, itemElement);
   return itemElement;
 }
 
diff --git a/js/file-operations.js b/js/file-operations.js
index c859d6b..3b77ffc 100644
--- a/js/file-operations.js
+++ b/js/file-operations.js
@@ -15,12 +15,28 @@ if (!window[FILE_OPS_KEY]) {
     loadContextHandler: null,
     clearContextHandler: null,
     currentOpenFileBtn: null,
-    currentClearContextBtn: null
+    currentClearContextBtn: null,
+    dataSourceConfigs: new Map() // Store configured data source types
   };
 }
 
 const fileOpsData = window[FILE_OPS_KEY];
 
+// Data Source Configuration Management
+const DEFAULT_DATA_SOURCE_CONFIGS = {
+  'midrc': {
+    id: 'midrc',
+    name: 'From MIDRC',
+    description: 'Download files from MIDRC using object ID'
+  }
+};
+
+// Initialize default configs
+Object.entries(DEFAULT_DATA_SOURCE_CONFIGS).forEach(([key, config]) => {
+  fileOpsData.dataSourceConfigs.set(key, config);
+});
+
+
 // File opening functionality
 export function initFileOperations() {
   // Check if context files elements exist
@@ -40,13 +56,17 @@ export function initFileOperations() {
   }
   
   // Create new event handlers
-  fileOpsData.loadContextHandler = loadContextFile;
+  fileOpsData.loadContextHandler = showUploadDropdown;
   fileOpsData.clearContextHandler = clearFileContext;
   
-  // Initialize Load Context button
+  // Initialize Load Context button (now a dropdown trigger)
   if (elements.openFileBtn) {
     elements.openFileBtn.addEventListener('click', fileOpsData.loadContextHandler);
     fileOpsData.currentOpenFileBtn = elements.openFileBtn;
+    
+    // Update button text to indicate dropdown
+    elements.openFileBtn.textContent = 'Upload Files ▼';
+    elements.openFileBtn.style.position = 'relative';
   } else {
     console.error(`[${windowId}] Open file button not found!`);
   }
@@ -66,34 +86,101 @@ export function initFileOperations() {
   window[FILE_OPS_KEY] = fileOpsData;
 }
 
+// Show upload dropdown menu
+function showUploadDropdown() {
+  // Remove existing dropdown if any
+  removeExistingDropdown();
+  
+  const dropdown = document.createElement('div');
+  dropdown.className = 'upload-dropdown';
+  dropdown.id = 'upload-dropdown';
+  
+  // Position dropdown relative to button
+  const buttonRect = elements.openFileBtn.getBoundingClientRect();
+  dropdown.style.position = 'absolute';
+  dropdown.style.top = `${buttonRect.bottom + 5}px`;
+  dropdown.style.left = `${buttonRect.left}px`;
+  dropdown.style.minWidth = `${buttonRect.width}px`;
+  dropdown.style.zIndex = '1000';
+  
+  // Create dropdown content
+  const dropdownContent = `
+    <div class="upload-dropdown-content">
+      <div class="upload-option" data-source-type="local">
+        <div class="upload-option-icon">📁</div>
+        <div class="upload-option-text">
+          <div class="upload-option-title">From Local Files</div>
+          <div class="upload-option-desc">Upload files from your computer</div>
+        </div>
+      </div>
+      ${Array.from(fileOpsData.dataSourceConfigs.values()).map(config => `
+        <div class="upload-option" data-source-type="${config.id}">
+          <div class="upload-option-icon">🖥️</div>
+          <div class="upload-option-text">
+            <div class="upload-option-title">${config.name}</div>
+            <div class="upload-option-desc">${config.description}</div>
+          </div>
+        </div>
+      `).join('')}
+    </div>
+  `;
+  
+  dropdown.innerHTML = dropdownContent;
+  document.body.appendChild(dropdown);
+  
+  // Add event listeners
+  dropdown.addEventListener('click', handleDropdownSelection);
+  
+  // Close dropdown when clicking outside
+  setTimeout(() => {
+    document.addEventListener('click', closeDropdownOnOutsideClick);
+  }, 0);
+}
+
+// Handle dropdown option selection
+function handleDropdownSelection(event) {
+  const option = event.target.closest('.upload-option');
+  if (!option) return;
+  
+  const sourceType = option.getAttribute('data-source-type');
+  
+  removeExistingDropdown();
+  
+  if (sourceType === 'local') {
+    loadContextFile();
+  } else if (sourceType === 'midrc') {
+    showMIDRCInputDialog();
+  }
+}
+
 async function loadContextFile() {
   try {
     addMessageToUI('system', 'Opening file dialog...');
-    
+
     const file = await ipcRenderer.invoke('open-file-dialog');
-    
+
     if (!file) {
       addMessageToUI('system', 'File selection cancelled.');
       return;
     }
-    
+
     if (file.error) {
       addMessageToUI('system', `Error opening file: ${file.error}`);
       console.error('File error:', file.error);
       return;
     }
-    
+
     addMessageToUI('system', `Context file loaded: ${file.name}`);
-    
+
     const fileExt = file.name.split('.').pop().toLowerCase();
     const needsBackendProcessing = ['xlsx', 'xls', 'html', 'htm', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'bmp', 'webp', 'svg', 'tiff', 'ico'].includes(fileExt);
     const isPowerPoint = ['pptx', 'ppt'].includes(fileExt);
-    
+
     let processedFile = file;
     if (needsBackendProcessing) {
       try {
         addMessageToUI('system', `Processing ${file.name} file...`);
-        
+
         // Send file to backend for processing
         const documentId = window.documentManager?.activeDocumentId || null;
         const response = await fetch('http://127.0.0.1:5000/api/process-file', {
@@ -113,7 +200,7 @@ async function loadContextFile() {
         }
 
         const processedData = await response.json();
-        
+
         if (processedData.success) {
           // Use the processed content
           processedFile = {
@@ -126,22 +213,19 @@ async function loadContextFile() {
         } else {
           throw new Error(processedData.error || 'Failed to process file');
         }
-        
+
       } catch (error) {
         console.error('Error processing file:', error);
         addMessageToUI('system', `Warning: Could not process file on backend (${error.message}). Using raw content.`);
         // Continue with original file content
       }
     }
-    
-    // Add file to context display immediately
-    // addContextFileToDisplay(processedFile, false); // Removed: using Data Sources instead
-    
+
     // Try to send file to backend as context
     let backendSaved = false;
     try {
       addMessageToUI('system', 'Saving context to backend...');
-      
+
       const response = await fetch('http://127.0.0.1:5000/api/file-context', {
         method: 'POST',
         headers: { 'Content-Type': 'application/json' },
@@ -166,10 +250,10 @@ async function loadContextFile() {
       console.error('Error saving context to backend:', error);
       addMessageToUI('system', 'Warning: Could not save to backend (backend may not be running). File still available for display.');
     }
-    
+
     // Always show the display choice dialog, regardless of backend status
     showDisplayChoiceDialog(processedFile, backendSaved);
-    
+
   } catch (error) {
     console.error('Error loading context file:', error);
     addMessageToUI('system', `Error loading context file: ${error.message}`);
@@ -178,7 +262,7 @@ async function loadContextFile() {
 
 function showDisplayChoiceDialog(file, backendSaved) {
   const currentDocumentId = window.documentManager?.activeDocumentId || null;
-  
+
   if (!currentDocumentId) {
     console.warn('No active document found for choice dialog');
     // Fallback to a simple alert or create without document scoping
@@ -189,7 +273,7 @@ function showDisplayChoiceDialog(file, backendSaved) {
   const backendStatus = backendSaved 
     ? 'Context saved successfully to backend.' 
     : 'Context available locally (backend not connected).';
-    
+
   const dialogHtml = `
     <div class="dialog-overlay">
       <div class="dialog-content">
@@ -204,13 +288,13 @@ function showDisplayChoiceDialog(file, backendSaved) {
       </div>
     </div>
   `;
-  
+
   // Create dialog with explicit document ID and register it
   const dialog = createDocumentDialog('display-choice-dialog', dialogHtml, 'file-operations', currentDocumentId);
   dialog.className = 'display-choice-dialog';
-  
+
   document.body.appendChild(dialog);
-  
+
   // Helper function to remove dialog and unregister elements
   const removeDialog = () => {
     // Unregister all elements created for this dialog
@@ -218,7 +302,7 @@ function showDisplayChoiceDialog(file, backendSaved) {
     const dataSourcesBtnId = createDocumentElementId('add-to-data-sources-btn', currentDocumentId);
     const hideBtnId = createDocumentElementId('keep-hidden-btn', currentDocumentId);
     const dialogId = createDocumentElementId('display-choice-dialog', currentDocumentId);
-    
+
     // Unregister elements
     if (window.documentManager) {
       window.documentManager.constructor.unregisterDynamicElement(currentDocumentId, displayBtnId);
@@ -226,45 +310,202 @@ function showDisplayChoiceDialog(file, backendSaved) {
       window.documentManager.constructor.unregisterDynamicElement(currentDocumentId, hideBtnId);
       window.documentManager.constructor.unregisterDynamicElement(currentDocumentId, dialogId);
     }
-    
+
     // Remove from DOM
     if (dialog.parentNode) {
       document.body.removeChild(dialog);
     }
   };
-  
+
   // Get elements using document-specific IDs
   const displayBtn = getDocumentElement('display-context-btn', currentDocumentId);
   const dataSourcesBtn = getDocumentElement('add-to-data-sources-btn', currentDocumentId);
   const hideBtn = getDocumentElement('keep-hidden-btn', currentDocumentId);
-  
+
   if (displayBtn) {
     displayBtn.addEventListener('click', () => {
       displayContextInPreview(file);
       removeDialog();
     });
   }
-  
+
   if (dataSourcesBtn) {
     dataSourcesBtn.addEventListener('click', async () => {
       // Add file to data lake
       const result = await addToDataSources(file);
-      
+
       // Generate the same reference name that data sources uses
       const referenceName = file.name.replace(/\.[^/.]+$/, "").replace(/[^a-zA-Z0-9]/g, '_').replace(/_{2,}/g, '_').replace(/^_|_$/g, '').toLowerCase();
-      
+
       addMessageToUI('system', `${file.name} added to Data Sources. Reference it with $${referenceName}`);
       removeDialog();
     });
   }
-  
+
   if (hideBtn) {
     hideBtn.addEventListener('click', () => {
       addMessageToUI('system', 'Context file loaded but not displayed. Use chat to reference the context.');
       removeDialog();
     });
   }
-  
+
+  // Add click outside to close
+  const overlay = dialog.querySelector('.dialog-overlay');
+  if (overlay) {
+    overlay.addEventListener('click', (e) => {
+      if (e.target === overlay) {
+        removeDialog();
+      }
+    });
+  }
+}
+
+function showMIDRCInputDialog() {
+  const currentDocumentId = window.documentManager?.activeDocumentId || null;
+
+  if (!currentDocumentId) {
+    console.warn('No active document found for MIDRC input dialog');
+    alert('Please ensure you have an active document before adding MIDRC data.');
+    return;
+  }
+
+  const dialogHtml = `
+    <div class="dialog-overlay">
+      <div class="dialog-content">
+        <h3>🔗 Add MIDRC Data to DataSource</h3>
+        <p>Enter the <strong>case_id</strong> or <strong>object_id</strong> for the MIDRC dataset you want to add to your data sources:</p>
+        <div class="input-group">
+          <input 
+            type="text" 
+            id="midrc-case-id-input" 
+            placeholder="Enter case_id or object_id"
+            class="form-control"
+            style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;"
+          >
+        </div>
+        <div class="dialog-actions">
+          <button id="midrc-download-btn" class="btn-primary">Add To DataSource</button>
+          <button id="midrc-cancel-btn" class="btn-secondary">Cancel</button>
+        </div>
+      </div>
+    </div>
+  `;
+
+  // Create dialog with explicit document ID and register it
+  const dialog = createDocumentDialog('midrc-input-dialog', dialogHtml, 'file-operations', currentDocumentId);
+  dialog.className = 'midrc-input-dialog';
+
+  document.body.appendChild(dialog);
+
+  // Helper function to remove dialog and unregister elements
+  const removeDialog = () => {
+    const inputId = createDocumentElementId('midrc-case-id-input', currentDocumentId);
+    const downloadBtnId = createDocumentElementId('midrc-download-btn', currentDocumentId);
+    const cancelBtnId = createDocumentElementId('midrc-cancel-btn', currentDocumentId);
+    const dialogId = createDocumentElementId('midrc-input-dialog', currentDocumentId);
+
+    // Unregister elements
+    if (window.documentManager) {
+      window.documentManager.constructor.unregisterDynamicElement(currentDocumentId, inputId);
+      window.documentManager.constructor.unregisterDynamicElement(currentDocumentId, downloadBtnId);
+      window.documentManager.constructor.unregisterDynamicElement(currentDocumentId, cancelBtnId);
+      window.documentManager.constructor.unregisterDynamicElement(currentDocumentId, dialogId);
+    }
+
+    // Remove from DOM
+    if (dialog.parentNode) {
+      document.body.removeChild(dialog);
+    }
+  };
+
+  // Get elements using document-specific IDs
+  const input = getDocumentElement('midrc-case-id-input', currentDocumentId);
+  const downloadBtn = getDocumentElement('midrc-download-btn', currentDocumentId);
+  const cancelBtn = getDocumentElement('midrc-cancel-btn', currentDocumentId);
+
+  // Function to handle download and add to data sources
+  const handleDownload = async () => {
+    const caseId = input?.value?.trim();
+    if (!caseId) {
+      alert('Please enter a object_id');
+      return;
+    }
+
+    // Close dialog immediately and show starting message
+    removeDialog();
+    addMessageToUI('system', `🔄 Starting MIDRC download for ${caseId}...`);
+    
+    // Start download in background (don't await)
+    downloadMIDRCInBackground(caseId, currentDocumentId);
+  };
+
+  // Background download function
+  const downloadMIDRCInBackground = async (caseId, documentId) => {
+    try {
+      const response = await fetch('http://127.0.0.1:5000/api/download_midrc_file', {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json'
+        },
+        body: JSON.stringify({
+          object_id: caseId,
+          document_id: documentId
+        })
+      });
+
+      if (!response.ok) {
+        throw new Error(`HTTP error! status: ${response.status}`);
+      }
+
+      const result = await response.json();
+
+      if (result.success) {
+        // Create a file object for adding to data sources
+        const midrcFile = {
+          name: `MIDRC_${caseId}`,
+          path: result.file_path || result.output_directory,
+          content: result.file_content || 'MIDRC data downloaded successfully',
+          redirect_output_file_path: result.file_path,
+          type: 'midrc'
+        };
+
+        // Add file to data sources directly
+        const dataSourceResult = await addToDataSources(midrcFile);
+        
+        // Generate the same reference name that data sources uses
+        const referenceName = midrcFile.name.replace(/\.[^/.]+$/, "").replace(/[^a-zA-Z0-9]/g, '_').replace(/_{2,}/g, '_').replace(/^_|_$/g, '').toLowerCase();
+
+        addMessageToUI('system', `✅ ${midrcFile.name} successfully added to Data Sources. Reference it with $${referenceName}`);
+      } else {
+        throw new Error(result.error || 'Download failed');
+      }
+    } catch (error) {
+      console.error('Error downloading MIDRC file:', error);
+      addMessageToUI('system', `❌ Failed to download MIDRC data (${caseId}): ${error.message}`);
+    }
+  };
+
+  // Add event listeners
+  if (input) {
+    // Enter key trigger for convenience
+    input.addEventListener('keypress', (e) => {
+      if (e.key === 'Enter') {
+        handleDownload();
+      }
+    });
+
+    // Focus the input
+    setTimeout(() => input.focus(), 100);
+  }
+
+  if (downloadBtn) {
+    downloadBtn.addEventListener('click', handleDownload);
+  }
+
+  if (cancelBtn) {
+    cancelBtn.addEventListener('click', removeDialog);
+  }
+
   // Add click outside to close
   const overlay = dialog.querySelector('.dialog-overlay');
   if (overlay) {
@@ -276,6 +517,7 @@ function showDisplayChoiceDialog(file, backendSaved) {
   }
 }
 
+
 function displayContextInPreview(file) {
   // Detect file format and render accordingly
   const fileExt = file.name.split('.').pop().toLowerCase();
@@ -406,22 +648,13 @@ function renderCSV(content) {
 
 function renderPDF(content) {
   const containerId = `pdf-container-${Date.now()}`;
+  
+  // Create actual DOM element instead of just HTML string
   const container = document.createElement("div");
   container.id = containerId;
   container.className = "pdf-container";
-  
-  // Global mousedown handler for PDF page shift+click functionality
-  const pdfMouseDownHandler = (e) => {
-    if (e.target.closest('.pdf-page') && e.shiftKey) {
-      const pageDiv = e.target.closest('.pdf-page');
-      if (pageDiv) {
-        const newDiv = createEditableTextDiv("New Text", e.offsetX, e.offsetY, "16px", "Arial", "#000000", true);
-        pageDiv.appendChild(newDiv);
-      }
-    }
-  };
-  document.addEventListener('mousedown', pdfMouseDownHandler, true);
 
+  // Parse content if it's a string
   let pages = content;
   if (typeof content === 'string') {
     try {
@@ -434,139 +667,71 @@ function renderPDF(content) {
   }
 
   pages.forEach(page => {
+    // Create page container with background image
     const pageDiv = document.createElement("div");
     pageDiv.className = "pdf-page";
     pageDiv.style.width = page.width + "px";
     pageDiv.style.height = page.height + "px";
-    pageDiv.style.backgroundImage = `url(http://127.0.0.1:5000/api/serve-file/${page.background})`;
+    
+    // Convert file path to HTTP URL for serving through backend
+    const backgroundUrl = page.background.startsWith('database/') 
+      ? `http://127.0.0.1:5000/api/serve-file/${page.background}`
+      : `http://127.0.0.1:5000/api/serve-file/${page.background}`;
+    
+    pageDiv.style.backgroundImage = `url(${backgroundUrl})`;
     pageDiv.style.backgroundSize = "cover";
     pageDiv.style.position = "relative";
-    
-    // Ensure the element can receive mouse events
-    pageDiv.style.pointerEvents = "auto";
-    pageDiv.style.cursor = "default";
-    pageDiv.style.zIndex = "1";
-
-    // Add mousedown event listener for shift+click functionality
-    pageDiv.addEventListener("mousedown", function(e) {
-      if (e.shiftKey) {
-        const newDiv = createEditableTextDiv("New Text", e.offsetX, e.offsetY, "16px", "Arial", "#000000", true);
-        pageDiv.appendChild(newDiv);
-      }
-    });
 
+    // Loop over all elements on the page
     page.elements.forEach(el => {
       if (el.type === "text") {
-        const textDiv = createEditableTextDiv(
-          el.text,
-          el.x,
-          el.y,
-          el.font_size + "px",
-          el.font,
-          el.color,
-          false // keep existing PDF text single-line
-        );
-        pageDiv.appendChild(textDiv);
-      }
-      if (el.type === "image") {
-        const img = document.createElement("img");
-        img.src = `http://127.0.0.1:5000/api/serve-file/${el.src}`;
-        Object.assign(img.style, {
+        // Measure actual rendered width using a hidden span
+        const measure = document.createElement("span");
+        measure.style.position = "absolute";
+        measure.style.visibility = "hidden";
+        measure.style.whiteSpace = "nowrap";
+        measure.style.fontSize = el.font_size + "px";
+        measure.style.fontFamily = el.font;
+        measure.textContent = el.text;
+        document.body.appendChild(measure);
+        const measuredWidth = measure.offsetWidth;
+        document.body.removeChild(measure);
+
+        // Choose the larger of original width or measured width
+        const finalWidth = Math.max(el.width, measuredWidth);
+
+        // Create editable text element
+        const textDiv = document.createElement("div");
+        textDiv.className = "text-box";
+        textDiv.contentEditable = true;
+        textDiv.textContent = el.text;
+
+        Object.assign(textDiv.style, {
           position: "absolute",
           left: el.x + "px",
           top: el.y + "px",
-          width: el.width + "px",
+          width: finalWidth + "px",
           height: el.height + "px",
-          cursor: "pointer"
+          fontSize: el.font_size + "px",
+          fontFamily: el.font,
+          color: el.color,
+          whiteSpace: "nowrap",      // Prevent line breaks
+          overflow: "visible",       // Allow overflow if needed
+          backgroundColor: "transparent",
+          lineHeight: "1",           // Match PDF more closely
         });
-        img.addEventListener("click", () => {
-          alert("Replace image functionality here.");
-        });
-        pageDiv.appendChild(img);
+
+        pageDiv.appendChild(textDiv);
       }
     });
 
     container.appendChild(pageDiv);
   });
-
+  
+  // Return the HTML string wrapped in pdf-content div
   return `<div class="pdf-content">${container.outerHTML}</div>`;
 }
 
-// Helper to create a multi-line editable text div
-function createEditableTextDiv(text, x, y, fontSize, fontFamily, color, multiLine = false) {
-  const textDiv = document.createElement("div");
-  textDiv.className = "text-box";
-  textDiv.contentEditable = true;
-  textDiv.textContent = text;
-
-  if (multiLine) {
-    Object.assign(textDiv.style, {
-      whiteSpace: "pre-wrap",
-      wordBreak: "break-word",
-      lineHeight: "1.2",
-      minWidth: "20px",
-      minHeight: "20px"
-    });
-  } else {
-    Object.assign(textDiv.style, {
-      whiteSpace: "nowrap",
-      overflow: "visible"
-    });
-  }
-
-  Object.assign(textDiv.style, {
-    position: "absolute",
-    left: x + "px",
-    top: y + "px",
-    fontSize: fontSize,
-    fontFamily: fontFamily,
-    color: color,
-    backgroundColor: "transparent",
-    cursor: "text",
-    zIndex: "10"
-  });
-
-  autoResizeText(textDiv, multiLine);
-  return textDiv;
-}
-
-
-// Resize width + height based on multi-line text content
-function autoResizeText(textDiv, multiLine) {
-  function resize() {
-    const measure = document.createElement(multiLine ? "div" : "span");
-    measure.style.position = "absolute";
-    measure.style.visibility = "hidden";
-    measure.style.fontSize = textDiv.style.fontSize;
-    measure.style.fontFamily = textDiv.style.fontFamily;
-    if (multiLine) {
-      measure.style.whiteSpace = "pre-wrap";
-      measure.style.wordBreak = "break-word";
-      measure.style.lineHeight = textDiv.style.lineHeight;
-    } else {
-      measure.style.whiteSpace = "nowrap";
-    }
-    measure.textContent = textDiv.textContent;
-
-    document.body.appendChild(measure);
-    
-    // Add padding to account for the border width (1px on each side = 2px total)
-    const borderWidth = 2; // 1px border on each side
-    const padding = 4; // Add some padding for better visual appearance
-    
-    textDiv.style.width = (measure.offsetWidth + borderWidth + padding) + "px";
-    textDiv.style.height = (measure.offsetHeight + borderWidth + padding) + "px";
-    
-    document.body.removeChild(measure);
-  }
-
-  resize();
-  textDiv.addEventListener("input", resize);
-}
-
-
-
-
 function renderJSON(content) {
   try {
     const parsed = JSON.parse(content);
@@ -890,6 +1055,51 @@ function escapeHtml(text) {
   return div.innerHTML;
 }
 
+// Add CSS styles for MIDRC input dialog
+const midrcStyles = document.createElement('style');
+midrcStyles.textContent = `
+  .midrc-input-dialog .input-status {
+    transition: all 0.3s ease;
+  }
+  
+  .midrc-input-dialog .status-downloading {
+    color: #3498db;
+    font-weight: 500;
+  }
+  
+  .midrc-input-dialog .status-success {
+    color: #27ae60;
+    font-weight: 500;
+  }
+  
+  .midrc-input-dialog .status-error {
+    color: #e74c3c;
+    font-weight: 500;
+  }
+  
+  .midrc-input-dialog .status-info {
+    color: #2c3e50;
+    font-weight: 500;
+  }
+  
+  .midrc-input-dialog .form-control:focus {
+    border-color: #3498db;
+    outline: none;
+    box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
+  }
+  
+  .midrc-input-dialog .form-control:disabled {
+    background-color: #f8f9fa;
+    opacity: 0.6;
+  }
+  
+  .midrc-input-dialog .btn-primary:disabled {
+    background-color: #95a5a6;
+    cursor: not-allowed;
+  }
+`;
+document.head.appendChild(midrcStyles);
+
 async function clearFileContext() {
   try {
     addMessageToUI('system', 'Clearing context...');
@@ -905,9 +1115,6 @@ async function clearFileContext() {
     const data = await response.json();
     addMessageToUI('system', data.message);
     
-    // Clear the context files display - removed since using Data Sources
-    // state.loadedContextFiles = [];
-    // updateContextFilesDisplay();
   } catch (error) {
     console.error('Error clearing context:', error);
     addMessageToUI('system', 'Error: Failed to clear context. Make sure the backend is running.');
@@ -932,4 +1139,22 @@ export function resetFileOperationsInitialization() {
   fileOpsData.currentOpenFileBtn = null;
   fileOpsData.currentClearContextBtn = null;
   window[FILE_OPS_KEY] = fileOpsData;
-}
\ No newline at end of file
+}
+
+// Helper functions for dropdown functionality
+
+function removeExistingDropdown() {
+  const existingDropdown = document.getElementById('upload-dropdown');
+  if (existingDropdown) {
+    document.removeEventListener('click', closeDropdownOnOutsideClick);
+    existingDropdown.remove();
+  }
+}
+
+function closeDropdownOnOutsideClick(event) {
+  const dropdown = document.getElementById('upload-dropdown');
+  if (dropdown && !dropdown.contains(event.target) && !elements.openFileBtn.contains(event.target)) {
+    removeExistingDropdown();
+  }
+}
+
diff --git a/js/operators.js b/js/operators.js
index 4acb625..e22bf9e 100644
--- a/js/operators.js
+++ b/js/operators.js
@@ -183,6 +183,7 @@ class OperatorManager {
       }
       
       console.log(`[${windowId}] Executing with data source:`, dataSource);
+      
       console.log(`[${windowId}] Code to execute:`, plainTextCode);
 
       // Execute using the same method as variable-operator-generator
@@ -2930,8 +2931,6 @@ function filterOperatorsTools(searchTerm) {
   });
 }
 
-
-
 // Make functions globally available
 window.operatorsModule = {
   showOperatorsDialog,
diff --git a/js/variable-operator-generator.js b/js/variable-operator-generator.js
index b6a6223..9a97089 100644
--- a/js/variable-operator-generator.js
+++ b/js/variable-operator-generator.js
@@ -18,6 +18,8 @@ class VariableOperatorGenerator {
     this.initialized = false;
     this.variableExecutionResults = new Map(); // Store results per variable
     this.instanceId = 'var_gen_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
+    this.selectedDataSource = null;
+    this.parameterValues = {};
   }
 
   /**
@@ -104,6 +106,12 @@ class VariableOperatorGenerator {
             <select class="datasource-dropdown" id="generator-datasource-dropdown">
               <option value="">-- Select a data source --</option>
             </select>
+            <div class="datasource-parameters" id="datasource-parameters" style="display: none;">
+              <h5>Parameters</h5>
+              <div class="parameters-container" id="parameters-container">
+                <!-- Parameters will be dynamically added here -->
+              </div>
+            </div>
           </div>
           
           <div class="generation-section">
@@ -198,6 +206,54 @@ class VariableOperatorGenerator {
         color: #666;
       }
       
+      .datasource-parameters {
+        margin-top: 16px;
+        padding: 12px;
+        background: #f8f9fa;
+        border-radius: 6px;
+        border: 1px solid #e9ecef;
+      }
+      
+      .datasource-parameters h5 {
+        margin: 0 0 8px 0;
+        color: #495057;
+        font-size: 14px;
+        font-weight: 600;
+      }
+      
+      .parameter-field {
+        margin-bottom: 12px;
+      }
+      
+      .parameter-field label {
+        display: block;
+        margin-bottom: 4px;
+        font-size: 13px;
+        color: #495057;
+        font-weight: 500;
+      }
+      
+      .parameter-field input {
+        width: 100%;
+        padding: 8px 12px;
+        border: 1px solid #ced4da;
+        border-radius: 4px;
+        font-size: 14px;
+        transition: border-color 0.2s ease;
+      }
+      
+      .parameter-field input:focus {
+        outline: none;
+        border-color: #80bdff;
+        box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
+      }
+      
+      .param-description {
+        font-size: 12px;
+        color: #6c757d;
+        margin-top: 4px;
+      }
+      
       .variable-info-details > div {
         margin-bottom: 4px;
       }
@@ -546,7 +602,8 @@ class VariableOperatorGenerator {
       'text/plain': '📝',
       'application/json': '🔧',
       'text/javascript': '⚡',
-      'text/html': '🌐'
+      'text/html': '🌐',
+      'midrc': '🔗'
     };
     
     return iconMap[type] || '📁';
@@ -559,13 +616,25 @@ class VariableOperatorGenerator {
     // Store the selected data source
     this.selectedDataSource = selectedValue;
     
-    // Enable generate code button if a source is selected
+    // Get the selected option to check data source type
+    const dropdown = this.generatorDialog.querySelector('[id$="generator-datasource-dropdown"]');
+    const selectedOption = dropdown?.options[dropdown.selectedIndex];
+    const dataSourceType = selectedOption?.getAttribute('data-type');
+    // Enable generate code button if a source is selected and parameters are valid
+    this.updateGenerateButtonState();
+  }
+
+  /**
+   * Update generate button state based on data source selection and parameter validity
+   */
+  updateGenerateButtonState() {
     const genBtn = this.generatorDialog.querySelector('[data-action="generate-code"]') ||
                    this.generatorDialog.querySelector('[id$="gen-code-btn"]') ||
                    this.generatorDialog.querySelector('button.btn-primary');
     
     if (genBtn) {
-      genBtn.disabled = !selectedValue;
+      const hasDataSource = !!this.selectedDataSource;
+      genBtn.disabled = !hasDataSource;
     }
   }
 
@@ -584,34 +653,37 @@ class VariableOperatorGenerator {
     // Show loading state
     this.showGenerationLoading(true);
     
-    try {
-      // Call backend API to generate code
-      const response = await fetch('http://127.0.0.1:5000/api/generate-variable-code', {
-        method: 'POST',
-        headers: {
-          'Content-Type': 'application/json'
-        },
-        body: JSON.stringify({
+          try {
+        // Prepare request payload
+        const payload = {
           variable_name: this.currentVariable.name,
           variable_type: this.currentVariable.type,
           variable_description: this.currentVariable.description,
           data_source: sourceName,
           document_id: window.documentManager?.activeDocumentId || 'default'
-        })
-      });
+        };
       
-      if (!response.ok) {
-        throw new Error(`HTTP error! status: ${response.status}`);
-      }
-      
-      const result = await response.json();
+      let response = null;
+      let result = null;
       
-      if (result.success && result.code) {
-        this.generatedCode = result.code;
-        this.showGeneratedCode(result.code, true); // Clear previous results for newly generated code
-      } else {
-        throw new Error(result.error || 'Failed to generate code');
-      }
+      // Try primary endpoint first
+      try {
+        response = await fetch('http://127.0.0.1:5000/api/generate-variable-code', {
+          method: 'POST',
+          headers: {
+            'Content-Type': 'application/json'
+          },
+          body: JSON.stringify(payload)
+        });
+        
+        if (response.ok) {
+          result = await response.json();
+          this.generatedCode = result.code;
+          this.showGeneratedCode(result.code, true); // Clear previous results for newly generated code
+        }
+      } catch (primaryError) {
+        console.warn('Generate code failed:', primaryError);
+      } 
       
     } catch (error) {
       console.error('Error generating code:', error);
diff --git a/js/variables.js b/js/variables.js
index f5d0a03..16c51fc 100644
--- a/js/variables.js
+++ b/js/variables.js
@@ -101,6 +101,8 @@ class VariablesManager {
     console.log('🔧 Setting up text selection detection');
     
     document.addEventListener('mouseup', (e) => {
+      console.log('🔧 mouseup event triggered');
+
       const selection = window.getSelection();
       
       // Early validation before setTimeout (same checks as comments.js)
@@ -116,9 +118,12 @@ class VariablesManager {
 
       // Check for valid text selection with visible dimensions
       if (!this.isInTemplateContent(selection) || selectedText.length === 0 || rect.width === 0 || rect.height === 0) {
+        console.log('🔧 mouseup: invalid selection (not in template, no text, or no dimensions), hiding button');
         this.hideFloatingButton();
         return;
-      }      
+      }
+      
+      console.log('🔧 mouseup: valid visible selection detected, scheduling handleTextSelection in 10ms');
       setTimeout(() => {
         this.handleTextSelection(e);
       }, 10);
diff --git a/testdata/midrc/MIDRC_case_manifest.json b/testdata/midrc/MIDRC_case_manifest.json
new file mode 100644
index 0000000..f175127
--- /dev/null
+++ b/testdata/midrc/MIDRC_case_manifest.json
@@ -0,0 +1,47 @@
+[
+  {
+    "_case_id": [
+      "2c98cc44-e550-4491-b008-4855e81fede4"
+    ],
+    "object_id": "dg.MD1R/333153b7-47a7-4753-ac80-978c1d20d920",
+    "md5sum": "9520e7b0b50feb368b308a70b36118f0",
+    "file_name": "10000000-1866-528/2.16.840.1.114274.1818.555427377790368411110591480827104894125/2.16.840.1.114274.1818.499594284946212211915352752768928554670.zip",
+    "file_size": 20275072
+  },
+  {
+    "_case_id": [
+      "013a74bd-407a-4387-9bce-b20a6789b511"
+    ],
+    "object_id": "dg.MD1R/2fcbad56-65db-4250-a737-9cf7be6132d4",
+    "md5sum": "2f38eedb29264e514588033d773cfb5f",
+    "file_name": "10000000-1866-508/2.16.840.1.114274.1818.574925843572276780713328853894914678400/2.16.840.1.114274.1818.46923166082686206283130758586883837099.zip",
+    "file_size": 61025104
+  },
+  {
+    "_case_id": [
+      "672bd11d-41cc-4c27-bbee-26d125da3329"
+    ],
+    "object_id": "dg.MD1R/1fd4ccae-7e81-4b79-b333-5129096f1954",
+    "md5sum": "61e28080077a0e85ed72c9b4424db770",
+    "file_name": "10000000-1833-111/2.16.840.1.114274.1818.48089885507484544189485255185071156353/2.16.840.1.114274.1818.474949253372843687614140640504225617537.zip",
+    "file_size": 14694076
+  },
+  {
+    "_case_id": [
+      "a63e5c40-1964-4019-aaab-bcc71c35cbf2"
+    ],
+    "object_id": "dg.MD1R/d4cd8e31-cd5f-4c87-a1f3-5f85554dc100",
+    "md5sum": "f331a20ff26084ae11601c02237abfb1",
+    "file_name": "10000000-1862-351/2.16.840.1.114274.1818.496988715160902706611237480166522384769/2.16.840.1.114274.1818.52165577517271384202141656181289994894.zip",
+    "file_size": 7064954
+  },
+  {
+    "_case_id": [
+      "5b7f3d12-6ceb-45df-ae18-f19cfe623542"
+    ],
+    "object_id": "dg.MD1R/8d17af80-f9de-4c34-8431-54e5fb5576b4",
+    "md5sum": "e9b82f28d8f802697184247069a07fb8",
+    "file_name": "10000000-1863-122/2.16.840.1.114274.1818.492408709575511742014278667997143252142/2.16.840.1.114274.1818.50332152251657010397375503021805089412.zip",
+    "file_size": 6934896
+  }
+]
\ No newline at end of file
